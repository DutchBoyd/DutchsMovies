#pragma checksum "C:\Projects\tutorial\RazorPagesMovie\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "69cf497ea7f045602d0f1d85ec80d10502819043"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(RazorPagesMovie.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace RazorPagesMovie.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Projects\tutorial\RazorPagesMovie\Pages\_ViewImports.cshtml"
using RazorPagesMovie;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"69cf497ea7f045602d0f1d85ec80d10502819043", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5bffd98f02597e6a09295a2131188dc64093be78", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Projects\tutorial\RazorPagesMovie\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<p></p>
<div class=""jumbotron"">
    <div class=""text-center"">
      <a href=""https://icon-library.net/icon/free-movies-icon-16.html"" title=""Free Movies Icon #205125""><img src=""https://icon-library.net//images/free-movies-icon/free-movies-icon-16.jpg"" width=""25%"" /></a>
    </div>
  <h1 class=""display-3 text-center"">Welcome to Dutch's Movies!</h1>
  <p class=""lead"">This is a simple website I built in my ongoing effort to learn how to code. The backend was created using ASP.NET and Razor Pages. The front-end is 
      using the Slate theme from <a href=https://bootswatch.com/slate/ class=""text-info"">bootswatch.com</a>. Most of the functionality was built by following along with the official Microsoft
      tutorial, but I've tried to customize the project and add my own features. 
  </p>

</div>

<div class=""row"">
    <div class=""col-lg-4"">
        <div class=""card text-white bg-primary mb-3"" >
            <div class=""card-header"">Feature Addition #1  (<span style=""color: lightgreen;"">In Progr");
            WriteLiteral(@"ess</span>)</div>
            <div class=""card-body"">
                <h4 class=""card-title text-info"">Adding Movie Posters</h4>
                <p class=""card-text"">The next feature I'd like to add is the ability to add movie posters to the app. There are two ways to do this: (1) adding an
                    image as a blog directly to the database, or (2) adding a filepath to the database and uploading the physical image file to a folder on the web sever. 
                    I'll experiment with both methods to determine which is best.
                </p>
            </div>
        </div>
    </div>
    <div class=""col-lg-4"">
        <div class=""card text-white mb-3"" >
        <div class=""card-header"">Feature Addition #2</div>
        <div class=""card-body"">
            <h4 class=""card-title text-info"">User Login</h4>
            <p class=""card-text"">I'd like to add a user model, and have the ability for users to login and define their own list of movies. This will let me play
           ");
            WriteLiteral(@"     around with using OAuth APIs to login users with social media sites (Twitter, Twitch, Facebook, Youtube).
            </p>
        </div>
        </div>
    </div>
    <div class=""col-lg-4"">
        <div class=""card text-white mb-3"" >
        <div class=""card-header"">Feature Addition #3</div>
        <div class=""card-body"">
            <h4 class=""card-title text-info"">Web Scraping</h4>
            <p class=""card-text"">The final feature I'd like to play around with is having some web-scraping functionality to go and collect data from third-party sites, such as new releases from IMDB or movie ratings from Rotten Tomatoes. I'd
                like to experiment with back-end data collection using both API calls and traditional web-scraping methods.
            </p>
        </div>
        </div>
    </div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
